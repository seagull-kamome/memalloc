/**
 * @file
 * @brief Implementation of SLAB memory allocation algorithm.
 * @section LICENSE
 *
 * MIT License
 *
 * Copyright (c) 2019 Hattori, Hiroki
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @section Usage
 *
 * ```` your_c_source.c
 * #define SLAB_ZONE_MALLOC
 * #define SLAB_PAGE_SHIFT
 * #define SLAB_PAGE_ALLOC()         (NULL)
 * #define SLAB_PAGE_FREE(pg)        (-1)
 * #define SLAB_ASSERT(x)            do { assert(x); } while (0)
 * // #define SLAB_PAGE_FREE(pg)        my_page_free(pg)
 * // #define SLAB_PREFIX              my_
 * // #define SLAB_EXTRA_ZONE_DATA_T
 * // #define NDEBUG                  (1)
 * // #define SLAB_PRIVATE_API        (1)
 * #include "somewherepath/slab.c_inc"
 * ````
 *
 */
#include <stddef.h>
#include <stdint.h>
#include <assert.h>

#if defined(SLAB_PREFIX)
#  define SLAB_GLUE2(x, y)       x##y
#  define SLAB_GLUE3(x, y)       SLAB_GLUE2(x, y)
#  define SLAB_GLUE(x)           SLAB_GLUE3(SLAB_PREFIX, x)
#else
#  define SLAB_GLUE(x)           x
#endif

#define SLAB_PAGE_HDR_TAG      SLAB_GLUE(slab_page_hdr_tag)
#define SLAB_ZONE              SLAB_GLUE(slab_zone)
#define SLAB_ZONE_T            SLAB_GLUE(slab_zone_t)
#define SLAB_FREE              SLAB_GLUE(slab_free)
#define SLAB_ALLOC             SLAB_GLUE(slab_alloc)
#define SLAB_INITIALIZE_ZONE   SLAB_GLUE(slab_initialize_zone)
#define SLAB_DESTROY_ZONE      SLAB_GLUE(slab_destroy_zone)
#define SLAB_ADD_PAGE          SLAB_GLUE(slab_add_page)

#  if defined(SLAB_PRIVATE_API) && SLAB_PRIVATE_API
#    define SLAB_API  static inline
#  else
#    define SLAB_API
#  endif


#  define SLAB_UNIT_T  SLAB_GLUE(slab_unit_t)
union SLAB_UNIT_T { size_t sz; union SLAB_UNIT_T* ptr; };
static_assert(SLAB_PAGE_SHIFT < sizeof(union SLAB_UNIT_T) * 8,
             "Too small page shift.");
static_assert(sizeof(union SLAB_UNIT_T) == 4
           || sizeof(union SLAB_UNIT_T) == 8, "unknown unit size");
#define SLAB_UNIT_SHIFT        (sizeof(union SLAB_UNIT_T) == 4? 2 : 3)

static_assert(SLAB_PAGE_SHIFT > SLAB_SLSHIFT + SLAB_UNIT_SHIFT, "Too small pageshift.");
static_assert(SLAB_SLSHIFT > 0, "Bad slshift");
#define SLAB_FLSHIFT           (SLAB_PAGE_SHIFT - SLAB_SLSHIFT - SLAB_UNIT_SHIFT)
#define SLAB_SLDEPTH           (1 << SLAB_SLSHIFT)
#define SLAB_SLMAPSIZE         (SLAB_FLSHIFT * SLAB_SLDEPTH)



static_assert((uintptr_t)NULL == (uintptr_t)0, "Assuming NULL==0.");

#if defined(__cplusplus)
extern "C" {
#endif


struct SLAB_PAGE_HDR_TAG;
typedef struct SLAB_ZONE {
#  if defined(SLAB_EXTRA_ZONE_DATA_T)
  SLAB_EXTRA_ZONE_DATA_T extra;
#  endif
  struct SLAB_PAGE_HDR_TAG *free_pages;
  struct SLAB_PAGE_HDR_TAG *full_pages;
  struct SLAB_PAGE_HDR_TAG *partial_pages[SLAB_SLMAPSIZE];
} *SLAB_ZONE_T;


SLAB_API void SLAB_INITIALIZE_ZONE(SLAB_ZONE_T zone);
void SLAB_DESTROY_ZONE(SLAB_ZONE_T zone);
SLAB_API void *SLAB_ALLOC(size_t nbytes, SLAB_ZONE_T zone);
SLAB_API void SLAB_FREE(void *ptr, SLAB_ZONE_T zone);
SLAB_API void SLAB_ADD_PAGE(uintptr_t pg, unsigned int npages, SLAB_ZONE_T zone);



/* ************************************************************************ */
#if defined(SLAB_DECL_ONLY) && SLAB_DECL_ONLY
#  if defined(SLAB_PRIVATE_API && SLAB_PRIVATE_API
#    error "SLAB_DECL_ONLY and SLAB_PRIVATE_API conflict."
#  endif
#else

#  define SLAB_PTR_BITS    (sizeof(void*) * 8)
#  define SLAB_PAGE_SIZE   ((size_t)1 << SLAB_PAGE_SHIFT)
#  define SLAB_PAGE_MASK   (~(((uintptr_t)1 << SLAB_PAGE_SHIFT) - 1))
#  define SLAB_PTR_PAGE(ptr) ((uintptr_t)(ptr) & SLAB_PAGE_MASK)
#  define SLAB_PTR_OFS(ptr)  ((uintptr_t)(ptr) & ~SLAB_PAGE_MASK)


// bin
// | start | start + step * 1 | ... | start + step * (n - 1) |
//   |
//  | Page header |       |      |      |      |
//           v next_page
//  | Page header |       |      |      |      |
//           v next_page
//  | Page header |       |      |      |      |
//
struct SLAB_PAGE_HDR_TAG {
  // MSB                                           LSB
  // | Next page#    | BumpTop or Free           |R|B|
  //                  <--------- PAGE_SHIFT -------->
  // B = 0:Free list 1:Bump ptr
  // R = 0:Allocated page  1:Reserved page
  uintptr_t next_page;

  // MSB                                           LSB
  // | Prev page#    |X|X| Number of used objects    |
  //                  <--------- PAGE_SHIFT -------->
  uintptr_t prev_page;

  uint16_t bin_ix;

  union SLAB_UNIT_T units[];
};
static_assert(((uintptr_t)((struct SLAB_PAGE_HDR_TAG*)NULL)->units & 3) == 0,
    "bad alignment?");

#  define SLAB_MAPPING_SEARCH     SLAB_GLUE(slab_mapping_search)
static inline uint16_t SLAB_MAPPING_SEARCH(size_t nunits) {
  uint8_t const f0 = sizeof(size_t) * 8 - SLAB_SLSHIFT
                   - SLAB_CLZ(nunits | (1 << (SLAB_SLSHIFT - 1)));
  size_t const x = nunits + (f0? (((size_t)1 << (f0 - 1)) - 1) : 0);
  uint8_t const f1 = sizeof(size_t) * 8 - SLAB_SLSHIFT
                   - SLAB_CLZ(x | (1 << (SLAB_SLSHIFT - 1)));
  uint8_t const s = (x >> (f1? (f1 - 1) : 0)) & (SLAB_SLDEPTH  - 1);
  SLAB_ASSERT((f1 << SLAB_SLSHIFT) + s < SLAB_SLMAPSIZE);
  return ((uint16_t)f1 << SLAB_SLSHIFT) + s;
}


#  define SLAB_BIN2UNITS         SLAB_GLUE(slab_bin2units)
static inline size_t SLAB_BIN2UNIT(uint16_t ix) {
  uint16_t const x = (ix >> SLAB_SLSHIFT);
  uint16_t const y = ix & (((uint16_t)1 << SLAB_SLSHIFT) - 1);
  return (x == 0)? (size_t)y
                 : (((uint16_t)1 << SLAB_SLSHIFT) | y) << (x - 1);
}



SLAB_API
void SLAB_FREE(void *ptr, SLAB_ZONE_T zone) {
  assert(ptr != NULL);

  struct SLAB_PAGE_HDR_TAG * const pg = (struct SLAB_PAGE_HDR_TAG*)SLAB_PTR_PAGE(ptr);
  SLAB_ASSERT(SLAB_PTR_OFS(pg->prev_page) > 0);
  uintptr_t const n = pg->prev_page - 1;

  if (SLAB_PTR_OFS(n) == 0) { // page to be free.
    struct SLAB_PAGE_HDR_TAG *nxtpg = (struct SLAB_PAGE_HDR_TAG*)SLAB_PTR_PAGE(pg->next_page);
    struct SLAB_PAGE_HDR_TAG *prvpg = (struct SLAB_PAGE_HDR_TAG*)SLAB_PTR_PAGE(pg->prev_page);
    prvpg->next_page = (void*)nxtpg;
    nxtpg->prev_page = (void*)prvpg;
    if (zone->bins[pg->bin_ix] == pg) zone->bins[pg->bin_ix] = nxtpg;

    if (zone->freepage != NULL || SLAB_PAGE_FREE(pg)) {
      pg->next_page = zone->freepage;
      zone->freepage = pg->next_page;
    }
  } else {
    ((union SLAB_UNIT_T*)ptr)->ptr = (union SLAB_UNIT_T*)((uintptr_t)pg | SLAB_PTR_OFS(pg->next_page));

    if (pg->next_page == NULL) {
      struct SLAB_PAGE_HDR_TAG * const nxt = zone->bins[pg->bin_ix];
      struct SLAB_PAGE_HDR_TAG * const prv = (struct SLAB_PAGE_HDR_TAG*)SLAB_PTR_PAGE(nxt->prev_page);
      pg->next_page = (void*)((uintptr_t)nxt | SLAB_PTR_OFS(ptr));
      pg->prev_page = (void*)((uintptr_t)prv | SLAB_PTR_OFS(n));

      prv->next_page = (void*)((uintptr_t)pg | SLAB_PTR_OFS(prv->next_page));
      nxt->prev_page = (void*)((uintptr_t)pg | SLAB_PTR_OFS(nxt->prev_page));

      zone->bins[pg->bin_ix] = pg;
    } else {
      pg->next_page = (void*)(SLAB_PTR_PAGE(pg->next_page) | SLAB_PTR_OFS(ptr));
      pg->prev_page = (void*)n;
    }
  }
}



SLAB_API
void *SLAB_ALLOC(size_t nbytes, SLAB_ZONE_T zone) {
  assert(nbytes > 0);
  assert(nbytes < ((size_t)1 << SLAB_PAGE_SHIFT) / 2);
  assert(zone != NULL);

  size_t const nunits = (nbytes + sizeof(union SLAB_UNIT_T) - 1) / sizeof(union SLAB_UNIT_T);
  uint16_t ix = SLAB_MAPPING_SEARCH(nunits);
  size_t const sz = SLAB_BIN2UNIT(ix);

  struct SLAB_PAGE_HDR_TAG *pg = zone->partial_pages[ix];
  if (pg == NULL) {
    uintptr_t flgs = 0;
    pg = zone->free_pages;
    if (pg == NULL) {
      pg = (struct SLAB_PAGE_HDR_TAG*)SLAB_PAGE_ALLOC();
      if (pg == NULL) return NULL;
    } else {
      zone->free_pages = (struct SLAB_PAGE_HDR_TAG*)SLAB_PTR_PAGE(pg->next_pag);
      flgs = pg->next_page & 2;;
    }
    pg->prev_page = SLAB_PTR_PAGE(NULL) | 1;
    pg->next_page = SLAB_PTR_PAGE(NULL) | SLAB_PTR_OFS(pg->units + bin_sz) | flgs | 1;
    pg->bin_ix = ix;
    zone->partial_pages[ix] = (struct SLAB_PAGE_HDR_TAG*)pg;
    return (void*)pg->units;
  }

  void *r = (void*)(SLAB_PTR_PAGE(pg) | (SLAB_PTR_OFS(pg->next_page) & ~3));
  union SLAB_UNIT_T *nxtobj;
  if (pg->next_page & 1) { // it's bump pointer.
    nxtobj = (union SLAB_UNIT_T*)pg->next_page + bin_sz;
    if (SLAB_PTR_PAGE(SLAB_PTR_OFS(nxtobj) + bin_sz * sizeof(union SLAB_UNIT_T)))
      nxtobj = NULL;
  } else { // it's free list.
    nxtobj = ((union SLAB_UNIT_T*)r)->ptr;
  }

  pg->prev_page = (uintptr_t)pg->prev_page + 1;

  if (nxtobj == NULL) { // no free objects left.
    struct SLAB_PAGE_HDR_TAG* nxt = (struct SLAB_PAGE_HDR_TAG*)SLAB_PTR_PAGE(pg->next_page);
    nxt->prev_page = SLAB_PTR_PAGE(NULL) | SLAB_PTR_OFS(nxt->prev_page);
    zone->partial_pages[ix] = nxt;

    nxt = zone->full_pages;
    pg->next_page = (uintptr_t)nxt | (pg->next_page & 2);
    pg->prev_page = SLAB_PTR_PAGE(NULL) | SLAB_PT_OFS(pg->prev_page);
    nxt->prev_page = SLAB_PTR_PAGE(pg) | SLAB_PTR_OFS(nxt->prev_page);
    zone->full_page = pg;
  } else {
    pg->next_page = SLAB_PTR_PAGE(pg->next_page) | (SLAB_PTR_OFS(nxtobj) & ~2);
                  | (pg->next_page & 2);
  }
  return r;
}





SLAB_API
void SLAB_INITIALIZE_ZONE(SLAB_ZONE_T zone) {
  assert(zone != NULL);

  zone->free_pages = NULL;
  zone->full_pages = NULL;
  for (unsigned int i = 0; i < SLAB_SLMAPSIZE; ++i)
    zone->partial_pages[i] = NULL;
  return zone;
}



SLAB_API
void SLAB_DESTROY_ZONE(SLAB_ZONE_T zone) {
  // TODO:
  SLAB_ZONE_FREE(zone);
}


SLAB_API
void SLAB_ADD_PAGE(uintptr_t pg, unsigned int npages, SLAB_ZONE_T zone) {
  assert((pg & ~SLAB_PAGE_MASK) == 0);
  assert(npages >= 1);

  do {
    struct SLAB_PAGE_HDR_TAG *p = (struct SLAB_PAGE_HDR_TAG*)pg;
    p->next_page = zone->free_pages | 2;
    zone->free_pages = p;
    pg += SLAB_PAGE_SIZE;
  } while (--npages);
}


#undef SLAB_MAPPING_SEARCH
#undef SLAB_PTR_BITS
#undef SLAB_PAGE_SIZE
#undef SLAB_PAGE_MARSK
#undef SLAB_PTR_PAGE
#undef SLAB_PTR_OFS

#endif


#  if defined(__cplusplus)
}
#  endif

#undef SLAB_API
#undef SLAB_GLUE3
#undef SLAB_GLUE2
#undef SLAB_GLUE

#undef SLAB_UNIT_T
#undef SLAB_UNIT_SHIFT
#undef SLAB_FLSHIFT
#undef SLAB_SLDEPTH
#undef SLAB_SLMAPSIZE

#undef SLAB_PAGE_HDR_TAG
#undef SLAB_ZONE
#undef SLAB_ZONE_T
#undef SLAB_FREE
#undef SLAB_ALLOC
#undef SLAB_INITIALIZE_ZONE
#undef SLAB_DESTROY_ZONE



// vim: ts=8 sw=2 filetype=c cindent expandtab :

