/**
 * @file
 * @brief Implementation of BUDDY memory allocation algorithm.
 * @section LICENSE
 *
 * MIT License
 *
 * Copyright (c) 2019 Hattori, Hiroki
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @section Usage
 *
 * ```` your_c_source.c
 * #define BUDDY_PAGE_SHIFT             (12)
 * #define BUDDY_LINES                  (5)
 * #define BUDDY_WARN_HANDLER(fmt,...)  do { } while (0)
 * #define BUDDY_NOMEMORY_HANDLER       (-1)
 * // #define BUDDY_PREFIX              my_
 * // #define BUDDY_DEBUG              (!)
 * // #define BUDDY_EXTRA_ZONE_DATA_T
 * // #define NDEBUG                  (1)
 * // #define BUDDY_PRIVATE_API        (1)
 * #include "somewherepath/slab.c_inc"
 * ````
 *
 */
#include <stddef.h>

#define BUDDY_GLUE2(x, y)       x##y
#define BUDDY_GLUE3(x, y)       BUDDY_GLUE2(x, y)
#define BUDDY_GLUE(x)           BUDDY_GLUE3(BUDDY_PREFIX, x)

#define BUDDY_ZONE              SLAB_GLUE(buddy_zone)
#define BUDDY_ZONE_T            SLAB_GLUE(buddy_zone_t)
#define BUDDY_FREE              SLAB_GLUE(buddy_free)
#define BUDDY_ALLOC             SLAB_GLUE(buddy_alloc)
#define BUDDY_CREATE_ZONE       SLAB_GLUE(buddy_create_zone)
#define BUDDY_ADD_PAGE          SLAB_GLUE(buddy_add_page)

#  if defined(BUDDY_PRIVATE_API) && BUDDY_PRIVATE_API
#    define BUDDY_API  static inline
#  else
#    define BUDDY_API
#  endif



static_assert(sizeof(void*) * 8 > BUDDY_PAGE_SHIFT,
    "Too bit BUDDY_PAGE_SHIFT");
static_assert(BUDDY_LINES < 256 && BUDDY_LINES < BUDDY_PAGE_SHIFT,
    "Too big BUDDY_LINES");


#if defined(__cplusplus)
extern "C" {
#endif

struct BUDDY_PAGE_HDR_TAG;
typedef struct BUDDY_ZONE {
  uintptr_t page_offset;
  struct BUDDY_PAGE_HDR_TAG *bin[BUDDY_LINES];
} BUDDY_ZONE_T;

#define BUDDY_ZONE_INITIALIZER(pgofs) { \
  .page_offset = (pgofs), \
  .bin = { NULL, }, }

BUDDY_API void BUDDY_CREATE_ZONE(uintptr_t page_offset, BUDDY_ZONE_T zone);
BUDDY_API int BUDDY_ADD_PAGE(uintptr_t pg, unsigned int npages, BUDDY_ZONE_T zone);
BUDDY_API uintptr_t BUDDY_ALLOCATE(uint8_t order, BUDDY_ZONE_T zone);
BUDDY_API void BUDDY_FREE(uintptr_t pg, uint8_t order, BUDDY_ZONE_T zone);



/* ************************************************************************ */
#if defined(BUDDY_DECL_ONLY) && BUDDY_DECL_ONLY
#  if defined(BUDDY_PRIVATE_API && BUDDY_PRIVATE_API
#    error "BUDDY_DECL_ONLY and BUDDY_PRIVATE_API conflict."
#  endif
#else


#  include <stdint.h>
#  include <assert.h>

#  define BUDDY_PAGE_MASK       (((uintptr_t)1 << BUDDY_PAGE_SHIFT) - 1)
#  define BUDDY_PAGE_SIZE       (((uintptr_t)1 << BUDDY_PAGE_SHIFT))


struct BUDDY_PAGE_HDR_TAG {
  struct BUDDY_PAGE_HDR_TAG *next;
};


BUDDY_API
void BUDDY_FREE(uintptr_t pg, uint8_t order, BUDDY_ZONE_T zone) {
  assert((pg & BUDDY_PAGE_MASK) == 0);
  assert(pg >= zone->page_offset);
  assert(zone != NULL);
  assert(order < BUDDY_LINES);

  uintptr_t algn = (uintptr_t)1 << (BUDDY_PAGE_SHIFT + order - 1);
retry:
  struct BUDDY_PAGE_HDR_TAG **p = zone->bin + order++;
  struct BUDDY_PAGE_HDR_TAG **q = NULL;
  while (*p != NULL && (uintptr_t)*p < pg) { q = p; p = &(*p)->next; }
  if (order < BUDDY_PAGE_LINES) {
    uintptr_t const x = pg - zone->page_offset;
    align <<= 1;
    if (x & align) {
      if (q && (((uintptr_t)p - zone->page_offset) | align) == x) {
        *q = *p;
        pg = (uintptr_t)p;
        goto retry;
      }
    } else {
      if (*p && (x | align) == (uintptr_t)*p - zone->page_offset) {
        pg = (uintptr_t)*p;
        *p = *p->next;
        goto retry;
      }
    }
  }
  struct BUDDY_PAGE_HDR_TAG *pp = (struct BUDDY_PAGE_HDR_TAG*)pg;
  pp->next = *p;
  *p = pp;
}


BUDDY_API
uintptr_t BUDDY_ALLOCATE(uint8_t order, BUDDY_ZONE_T zone) {
  assert(order < BUDDY_LINES);
  assert(zone != NULL);

retry:
  uint8_t oo = order;
  while (oo < BUDDY_LINES && zone->bins[oo] == NULL) ++oo;
  if (oo >= BUDDY_LINES) {
    BUDDY_WARN_HANDLER("no space left for zone(%p).", zone);
    if (BUDDY_NOMEMORY_HANDLER(zone) >= 0) goto retry;
    return (uintptr_t)NULL;
  }

  uintptr_t const pg = (uintptr_t)zone->bins[oo];
  zone->bins[oo] = zone->bins[oo]->next;
  while (oo-- > order)
    BUDDY_FREE(pg + (1 << (BUDDY_PAGE_SHIFT + oo)), oo, zone);

  return pg;
}




BUDDY_API
int BUDDY_ADD_PAGE(uintptr_t pg, unsigned int npages, BUDDY_ZONE_T zone) {
  assert((pg & BUDDY_PAGE_MASK) == 0);
  assert(pg >= zone->page_offset);
  assert(zone != NULL);

  do {
    BUDDY_FREE((void*)pg, 0, zone);
    pg += BUDDY_PAGE_SIZE;
  } while (--npages);

  return 0;
}



BUDDY_API
void inline BUDDY_CREATE_ZONE(uintptr_t page_offset, BUDDY_ZONE_T zone) {
  assert(zone != NULL);
  zone->page_offset = page_offset;
  for (unsigned int i = 0; i < BUDDY_LINES; ++ i)
    zone->bin[i] = NULL;
}


#  undef BUDDY_WARN
#  undef BUDDY_PAGE_MASK
#  undef BUDDY_PAGE_SIZE
#  endif

#if defined(__cplusplus)
}
#endif

#undef BUDDY_API
#undef BUDDY_GLUE3
#undef BUDDY_GLUE2
#undef BUDDY_GLUE2
#undef BUDDY_ZONE
#undef BUDDY_ZONE_T
#undef BUDDY_FREE
#undef BUDDY_ALLOC
#undef BUDDY_CREATE_ZONE
#undef BUDDY_ADD_PAGE

// vim: ts=8 sw=2 filetype=c cindent expandtab :
